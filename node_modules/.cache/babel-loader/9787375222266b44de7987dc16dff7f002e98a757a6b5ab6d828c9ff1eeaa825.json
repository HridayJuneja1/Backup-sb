{"ast":null,"code":"var _jsxFileName = \"/Users/hrida/SYST35300/samskritabharati/src/components/BrowseBooks.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport BookCard from './BookCard';\nimport Sorting from './Sorting';\nimport Search from './Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BrowseBooks = () => {\n  _s();\n  // `books` holds all the fetched books, `filteredBooks` holds the displayed (searched/sorted) books.\n  const [books, setBooks] = useState([]);\n  const [filteredBooks, setFilteredBooks] = useState([]);\n  const [user] = useState(null); // Placeholder for user authentication; currently set to `null`.\n  const userId = user === null || user === void 0 ? void 0 : user.id; // Optional chaining to get the userId if user exists.\n\n  // useEffect hook to fetch the books when the component mounts.\n  useEffect(() => {\n    // Asynchronous function to fetch book data from the API.\n    const fetchBooks = async () => {\n      try {\n        const response = await fetch('/api/books'); // Fetch the books from the server.\n\n        // Check if the response is not OK (status other than 200-299).\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        // Parse the response data as JSON.\n        const data = await response.json();\n\n        // Format the book data (assumes each book has _id, title, author, isbn, and image fields).\n        const formattedBooks = data.map(book => ({\n          id: book._id,\n          title: book.title || '',\n          // Ensure title is present, fallback to empty string if undefined.\n          author: book.author || '',\n          // Ensure author is present, fallback to empty string if undefined.\n          isbn: book.isbn || '',\n          // Ensure ISBN is present, fallback to empty string if undefined.\n          image: book.image || '' // Ensure image is present, fallback to empty string if undefined.\n        }));\n\n        // Set the `books` and `filteredBooks` states to the fetched and formatted books.\n        setBooks(formattedBooks);\n        setFilteredBooks(formattedBooks); // Initially, display all books.\n      } catch (error) {\n        console.error(\"Error fetching books:\", error); // Log any errors during the fetching process.\n      }\n    };\n    fetchBooks(); // Invoke the fetchBooks function.\n  }, []); // Empty dependency array ensures this effect only runs once on component mount.\n\n  // Function to handle sorting of the books.\n  const sortBooks = order => {\n    // Create a copy of the filteredBooks to avoid mutating the state directly.\n    let sortedArray = [...filteredBooks];\n\n    // Sort based on the order selected (ascending or descending by title).\n    if (order === 'asc') {\n      sortedArray.sort((a, b) => a.title.localeCompare(b.title)); // Sort A to Z.\n    } else if (order === 'desc') {\n      sortedArray.sort((a, b) => b.title.localeCompare(a.title)); // Sort Z to A.\n    }\n\n    // Update the filteredBooks state with the sorted array.\n    setFilteredBooks(sortedArray);\n  };\n\n  // Function to filter books based on the search term (title, author, or ISBN).\n  const filterBooks = searchTerm => {\n    if (!searchTerm.trim()) {\n      // If search term is empty, reset the filteredBooks to show all books.\n      setFilteredBooks(books);\n    } else {\n      // Prepare the search term by trimming whitespace and removing dashes from ISBN.\n      const search = searchTerm.trim().toLowerCase().replace(/-/g, '');\n\n      // Filter books by title, author, or ISBN (removing dashes from ISBN).\n      const filteredArray = books.filter(book => book.title && book.title.toLowerCase().includes(search) ||\n      // Match title.\n      book.author && book.author.toLowerCase().includes(search) ||\n      // Match author.\n      book.isbn && book.isbn.replace(/-/g, '').toLowerCase().includes(search) // Match ISBN, ignoring dashes.\n      );\n\n      // Update the filteredBooks state with the filtered results.\n      setFilteredBooks(filteredArray);\n    }\n  };\n\n  // Inline styles for different parts of the component UI.\n  const searchContainerStyle = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#000',\n    padding: '20px'\n  };\n  const sortingContainerStyle = {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    paddingRight: '20px',\n    backgroundColor: '#000',\n    paddingBottom: '10px'\n  };\n  const pageStyle = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    alignItems: 'flex-start',\n    backgroundColor: '#000',\n    padding: '20px',\n    color: 'white'\n  };\n  const noBooksStyle = {\n    textAlign: 'center',\n    color: 'white',\n    fontSize: '1.5rem'\n  };\n\n  // Return JSX for the BrowseBooks component.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: searchContainerStyle,\n      children: /*#__PURE__*/_jsxDEV(Search, {\n        filterBooks: filterBooks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: sortingContainerStyle,\n      children: /*#__PURE__*/_jsxDEV(Sorting, {\n        sortBooks: sortBooks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: pageStyle,\n      children: filteredBooks.length > 0 ?\n      // Map over filteredBooks and render a BookCard for each.\n      filteredBooks.map(book => /*#__PURE__*/_jsxDEV(BookCard, {\n        book: book,\n        userId: userId\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)) :\n      /*#__PURE__*/\n      // Show this message if no books match the search/filter criteria.\n      _jsxDEV(\"div\", {\n        style: noBooksStyle,\n        children: \"No books found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(BrowseBooks, \"M0+VGxtWyl7lBMfg8A53vUkU6wM=\");\n_c = BrowseBooks;\nexport default BrowseBooks;\nvar _c;\n$RefreshReg$(_c, \"BrowseBooks\");","map":{"version":3,"names":["React","useEffect","useState","BookCard","Sorting","Search","jsxDEV","_jsxDEV","BrowseBooks","_s","books","setBooks","filteredBooks","setFilteredBooks","user","userId","id","fetchBooks","response","fetch","ok","Error","data","json","formattedBooks","map","book","_id","title","author","isbn","image","error","console","sortBooks","order","sortedArray","sort","a","b","localeCompare","filterBooks","searchTerm","trim","search","toLowerCase","replace","filteredArray","filter","includes","searchContainerStyle","display","justifyContent","alignItems","backgroundColor","padding","sortingContainerStyle","paddingRight","paddingBottom","pageStyle","flexWrap","color","noBooksStyle","textAlign","fontSize","children","style","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["/Users/hrida/SYST35300/samskritabharati/src/components/BrowseBooks.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport BookCard from './BookCard';\r\nimport Sorting from './Sorting';\r\nimport Search from './Search';\r\n\r\nconst BrowseBooks = () => {\r\n  // `books` holds all the fetched books, `filteredBooks` holds the displayed (searched/sorted) books.\r\n  const [books, setBooks] = useState([]);\r\n  const [filteredBooks, setFilteredBooks] = useState([]);\r\n  const [user] = useState(null); // Placeholder for user authentication; currently set to `null`.\r\n  const userId = user?.id; // Optional chaining to get the userId if user exists.\r\n\r\n  // useEffect hook to fetch the books when the component mounts.\r\n  useEffect(() => {\r\n    // Asynchronous function to fetch book data from the API.\r\n    const fetchBooks = async () => {\r\n      try {\r\n        const response = await fetch('/api/books'); // Fetch the books from the server.\r\n        \r\n        // Check if the response is not OK (status other than 200-299).\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n\r\n        // Parse the response data as JSON.\r\n        const data = await response.json();\r\n\r\n        // Format the book data (assumes each book has _id, title, author, isbn, and image fields).\r\n        const formattedBooks = data.map(book => ({\r\n          id: book._id,\r\n          title: book.title || '',  // Ensure title is present, fallback to empty string if undefined.\r\n          author: book.author || '', // Ensure author is present, fallback to empty string if undefined.\r\n          isbn: book.isbn || '',  // Ensure ISBN is present, fallback to empty string if undefined.\r\n          image: book.image || ''  // Ensure image is present, fallback to empty string if undefined.\r\n        }));\r\n\r\n        // Set the `books` and `filteredBooks` states to the fetched and formatted books.\r\n        setBooks(formattedBooks);\r\n        setFilteredBooks(formattedBooks); // Initially, display all books.\r\n      } catch (error) {\r\n        console.error(\"Error fetching books:\", error); // Log any errors during the fetching process.\r\n      }\r\n    };\r\n\r\n    fetchBooks(); // Invoke the fetchBooks function.\r\n  }, []); // Empty dependency array ensures this effect only runs once on component mount.\r\n\r\n  // Function to handle sorting of the books.\r\n  const sortBooks = (order) => {\r\n    // Create a copy of the filteredBooks to avoid mutating the state directly.\r\n    let sortedArray = [...filteredBooks]; \r\n\r\n    // Sort based on the order selected (ascending or descending by title).\r\n    if (order === 'asc') {\r\n      sortedArray.sort((a, b) => a.title.localeCompare(b.title)); // Sort A to Z.\r\n    } else if (order === 'desc') {\r\n      sortedArray.sort((a, b) => b.title.localeCompare(a.title)); // Sort Z to A.\r\n    }\r\n\r\n    // Update the filteredBooks state with the sorted array.\r\n    setFilteredBooks(sortedArray);\r\n  };\r\n\r\n  // Function to filter books based on the search term (title, author, or ISBN).\r\n  const filterBooks = (searchTerm) => {\r\n    if (!searchTerm.trim()) {\r\n      // If search term is empty, reset the filteredBooks to show all books.\r\n      setFilteredBooks(books);\r\n    } else {\r\n      // Prepare the search term by trimming whitespace and removing dashes from ISBN.\r\n      const search = searchTerm.trim().toLowerCase().replace(/-/g, '');\r\n\r\n      // Filter books by title, author, or ISBN (removing dashes from ISBN).\r\n      const filteredArray = books.filter(book =>\r\n        (book.title && book.title.toLowerCase().includes(search)) || // Match title.\r\n        (book.author && book.author.toLowerCase().includes(search)) || // Match author.\r\n        (book.isbn && book.isbn.replace(/-/g, '').toLowerCase().includes(search)) // Match ISBN, ignoring dashes.\r\n      );\r\n\r\n      // Update the filteredBooks state with the filtered results.\r\n      setFilteredBooks(filteredArray);\r\n    }\r\n  };\r\n\r\n  // Inline styles for different parts of the component UI.\r\n  const searchContainerStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#000',\r\n    padding: '20px',\r\n  };\r\n\r\n  const sortingContainerStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    paddingRight: '20px',\r\n    backgroundColor: '#000',\r\n    paddingBottom: '10px',\r\n  };\r\n\r\n  const pageStyle = {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'flex-start',\r\n    backgroundColor: '#000',\r\n    padding: '20px',\r\n    color: 'white',\r\n  };\r\n\r\n  const noBooksStyle = {\r\n    textAlign: 'center',\r\n    color: 'white',\r\n    fontSize: '1.5rem',\r\n  };\r\n\r\n  // Return JSX for the BrowseBooks component.\r\n  return (\r\n    <div>\r\n      {/* Search component */}\r\n      <div style={searchContainerStyle}>\r\n        <Search filterBooks={filterBooks} />\r\n      </div>\r\n\r\n      {/* Sorting component */}\r\n      <div style={sortingContainerStyle}>\r\n        <Sorting sortBooks={sortBooks} />\r\n      </div>\r\n\r\n      {/* Display books or a 'No books found' message */}\r\n      <div style={pageStyle}>\r\n        {filteredBooks.length > 0 ? (\r\n          // Map over filteredBooks and render a BookCard for each.\r\n          filteredBooks.map((book) => (\r\n            <BookCard key={book.id} book={book} userId={userId} />\r\n          ))\r\n        ) : (\r\n          // Show this message if no books match the search/filter criteria.\r\n          <div style={noBooksStyle}>No books found</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BrowseBooks;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}